
Smart Remote Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000e8  008000e8  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000add  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069f  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3e       	cpi	r26, 0xE8	; 232
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ee       	ldi	r26, 0xE8	; 232
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3e       	cpi	r26, 0xED	; 237
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 01 	call	0x290	; 0x290 <main>
  8a:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
unsigned char led2_state = 0; // LED2 state (0 = OFF, 1 = ON)
unsigned char fan_state = 0; // Fan state (0 = OFF, 1 = ON)

void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port = cmnd;
  92:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port &= ~(1 << RS);    /* RS=0 command reg. */
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1 << RW);    /* RW=0 Write operation */
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port |= (1 << EN);     /* Enable pulse */
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_Command+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_Command+0x1c>
	_delay_us(1);
	LCD_Command_Port &= ~(1 << EN);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e6       	ldi	r24, 0x6F	; 111
  b6:	97 e1       	ldi	r25, 0x17	; 23
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Command+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Command+0x2c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_Char>:
	_delay_ms(3);
}

void LCD_Char(unsigned char char_data) /* LCD data write function */
{
	LCD_Data_Port = char_data;
  c2:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1 << RS);     /* RS=1 Data reg. */
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1 << RW);    /* RW=0 write operation */
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port |= (1 << EN);     /* Enable Pulse */
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Char+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Char+0x1c>
	_delay_us(1);
	LCD_Command_Port &= ~(1 << EN);
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Char+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Char+0x2c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_Init>:
	_delay_ms(1);
}

void LCD_Init(void)         /* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;     /* Make LCD command port direction as o/p */
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23
	LCD_Data_Dir = 0xFF;        /* Make LCD data port direction as o/p */
  f6:	81 bb       	out	0x11, r24	; 17
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9c e9       	ldi	r25, 0x9C	; 156
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Init+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_Init+0x10>
 102:	00 00       	nop
	_delay_ms(20);              /* LCD Power ON delay always >15ms */

	LCD_Command(0x38);          /* Initialization of 16X2 LCD in 8bit mode */
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0C);          /* Display ON Cursor OFF */
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);          /* Clear display */
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x80);          /* Cursor at home position */
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 11c:	08 95       	ret

0000011e <LCD_String>:
}

void LCD_String(char *str)      /* Send string to LCD function */
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	8c 01       	movw	r16, r24
	int i = 0;
	for (i = 0; str[i] != 0; i++)    /* Send each char of string till the NULL */
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	03 c0       	rjmp	.+6      	; 0x134 <LCD_String+0x16>
	{
		LCD_Char(str[i]);
 12e:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_Char>
}

void LCD_String(char *str)      /* Send string to LCD function */
{
	int i = 0;
	for (i = 0; str[i] != 0; i++)    /* Send each char of string till the NULL */
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	f8 01       	movw	r30, r16
 136:	ec 0f       	add	r30, r28
 138:	fd 1f       	adc	r31, r29
 13a:	80 81       	ld	r24, Z
 13c:	81 11       	cpse	r24, r1
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <LCD_String+0x10>
	{
		LCD_Char(str[i]);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command(0x01);       /* clear display */
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x80);       /* cursor at home position */
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 156:	08 95       	ret

00000158 <initializePorts>:
}

void initializePorts()
{
	DDRC |= (1 << LED1_PIN) | (1 << LED2_PIN);    // Set LED pins as output
 158:	84 b3       	in	r24, 0x14	; 20
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1 << LED1_PIN) | (1 << LED2_PIN)); // Turn off LEDs initially
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	8c 7f       	andi	r24, 0xFC	; 252
 162:	85 bb       	out	0x15, r24	; 21

	// Motor Driver Configuration
	DDRB |= (1 << PB3) | (1 << PB4) | (1 << PB5) | (1 << PB6); // Set motor control pins as output
 164:	87 b3       	in	r24, 0x17	; 23
 166:	88 67       	ori	r24, 0x78	; 120
 168:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1 << PB3) | (1 << PB4) | (1 << PB5) | (1 << PB6)); // Set motor control pins low initially
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	87 78       	andi	r24, 0x87	; 135
 16e:	88 bb       	out	0x18, r24	; 24
 170:	08 95       	ret

00000172 <motorControl>:
}

void motorControl(uint8_t controlBits)
{
	PORTB = (PORTB & 0x8F) | (controlBits << 4);
 172:	28 b3       	in	r18, 0x18	; 24
 174:	30 e1       	ldi	r19, 0x10	; 16
 176:	83 9f       	mul	r24, r19
 178:	c0 01       	movw	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 78       	andi	r18, 0x8F	; 143
 17e:	82 2b       	or	r24, r18
 180:	88 bb       	out	0x18, r24	; 24
 182:	08 95       	ret

00000184 <keyfind>:

char keyfind()
{
	while (1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	8a bb       	out	0x1a, r24	; 26
		KEY_PRT = 0xFF;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	8b bb       	out	0x1b, r24	; 27
		/* now check for rows */
		KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
 18c:	8f ee       	ldi	r24, 0xEF	; 239
 18e:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0F);
 190:	89 b3       	in	r24, 0x19	; 25
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <colloc>
		if (colloc != 0x0F)
 198:	8f 30       	cpi	r24, 0x0F	; 15
 19a:	19 f0       	breq	.+6      	; 0x1a2 <keyfind+0x1e>
		{
			rowloc = 0;
 19c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <rowloc>
			break;
 1a0:	23 c0       	rjmp	.+70     	; 0x1e8 <keyfind+0x64>
		}

		KEY_PRT = 0xDF;        /* check for pressed key in 2nd row */
 1a2:	8f ed       	ldi	r24, 0xDF	; 223
 1a4:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0F);
 1a6:	89 b3       	in	r24, 0x19	; 25
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <colloc>
		if (colloc != 0x0F)
 1ae:	8f 30       	cpi	r24, 0x0F	; 15
 1b0:	21 f0       	breq	.+8      	; 0x1ba <keyfind+0x36>
		{
			rowloc = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <rowloc>
			break;
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <keyfind+0x64>
		}

		KEY_PRT = 0xBF;        /* check for pressed key in 3rd row */
 1ba:	8f eb       	ldi	r24, 0xBF	; 191
 1bc:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0F);
 1be:	89 b3       	in	r24, 0x19	; 25
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <colloc>
		if (colloc != 0x0F)
 1c6:	8f 30       	cpi	r24, 0x0F	; 15
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <keyfind+0x4e>
		{
			rowloc = 2;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <rowloc>
			break;
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <keyfind+0x64>
		}

		KEY_PRT = 0x7F;        /* check for pressed key in 4th row */
 1d2:	8f e7       	ldi	r24, 0x7F	; 127
 1d4:	8b bb       	out	0x1b, r24	; 27
		colloc = (KEY_PIN & 0x0F);
 1d6:	89 b3       	in	r24, 0x19	; 25
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <colloc>
		if (colloc != 0x0F)
 1de:	8f 30       	cpi	r24, 0x0F	; 15
 1e0:	89 f2       	breq	.-94     	; 0x184 <keyfind>
		{
			rowloc = 3;
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <rowloc>
			break;
		}
	}

	if (colloc == 0x0E)
 1e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <colloc>
 1ec:	8e 30       	cpi	r24, 0x0E	; 14
 1ee:	69 f4       	brne	.+26     	; 0x20a <keyfind+0x86>
	{
		LCD_Clear();
 1f0:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear>
		return (keypad[rowloc][0]);
 1f4:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <rowloc>
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	08 95       	ret
	}
	else if (colloc == 0x0D)
 20a:	8d 30       	cpi	r24, 0x0D	; 13
 20c:	69 f4       	brne	.+26     	; 0x228 <keyfind+0xa4>
	{
		LCD_Clear();
 20e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear>
		return (keypad[rowloc][1]);
 212:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <rowloc>
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	e0 5a       	subi	r30, 0xA0	; 160
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	08 95       	ret
	}
	else if (colloc == 0x0B)
 228:	8b 30       	cpi	r24, 0x0B	; 11
 22a:	69 f4       	brne	.+26     	; 0x246 <keyfind+0xc2>
	{
		LCD_Clear();
 22c:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear>
		return (keypad[rowloc][2]);
 230:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <rowloc>
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e0 5a       	subi	r30, 0xA0	; 160
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	08 95       	ret
	}
	else
	{
		LCD_Clear();
 246:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Clear>
		return (keypad[rowloc][3]);
 24a:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <rowloc>
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e0 5a       	subi	r30, 0xA0	; 160
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	83 81       	ldd	r24, Z+3	; 0x03
	}
}
 25e:	08 95       	ret

00000260 <toggleFan>:

void toggleFan() {
	if (fan_state == 0) {
 260:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 264:	81 11       	cpse	r24, r1
 266:	0a c0       	rjmp	.+20     	; 0x27c <toggleFan+0x1c>
		LCD_String("FAN is ON     ");
 268:	80 e7       	ldi	r24, 0x70	; 112
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
		fan_state = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
		motorControl(0b01); // Rotate motor in one direction
 276:	0e 94 b9 00 	call	0x172	; 0x172 <motorControl>
 27a:	08 95       	ret
		} else {
		LCD_String("FAN is OFF    ");
 27c:	8f e7       	ldi	r24, 0x7F	; 127
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
		fan_state = 0;
 284:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
		motorControl(0b00); // Stop motor
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 b9 00 	call	0x172	; 0x172 <motorControl>
 28e:	08 95       	ret

00000290 <main>:
	}
}

int main(void)
{
	LCD_Init();
 290:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Init>
	initializePorts();
 294:	0e 94 ac 00 	call	0x158	; 0x158 <initializePorts>
	LCD_String("1,2-LED 5-FAN");
 298:	8e e8       	ldi	r24, 0x8E	; 142
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
	LCD_Command(0xC0);
 2a0:	80 ec       	ldi	r24, 0xC0	; 192
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("Press 1,2 or 5");
 2a6:	8c e9       	ldi	r24, 0x9C	; 156
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
	while (1)
	{
		char key = keyfind();
 2ae:	0e 94 c2 00 	call	0x184	; 0x184 <keyfind>
 2b2:	c8 2f       	mov	r28, r24
		LCD_Command(0xC0);
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		//LCD_Char(key);       /* Display which key is pressed */
		switch (key)
 2ba:	c2 33       	cpi	r28, 0x32	; 50
 2bc:	e9 f0       	breq	.+58     	; 0x2f8 <main+0x68>
 2be:	c5 33       	cpi	r28, 0x35	; 53
 2c0:	a1 f1       	breq	.+104    	; 0x32a <main+0x9a>
 2c2:	c1 33       	cpi	r28, 0x31	; 49
 2c4:	a1 f7       	brne	.-24     	; 0x2ae <main+0x1e>
		{
			case '1':
			if (led1_state == 0)
 2c6:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <led1_state>
 2ca:	81 11       	cpse	r24, r1
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <main+0x54>
			{
				LCD_String("LED1 is ON    ");
 2ce:	8b ea       	ldi	r24, 0xAB	; 171
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
				led1_state = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <led1_state>
				PORTC |= (1 << LED1_PIN);
 2dc:	85 b3       	in	r24, 0x15	; 21
 2de:	81 60       	ori	r24, 0x01	; 1
 2e0:	85 bb       	out	0x15, r24	; 21
 2e2:	e5 cf       	rjmp	.-54     	; 0x2ae <main+0x1e>
			}
			else
			{
				LCD_String("LED1 is OFF   ");
 2e4:	8a eb       	ldi	r24, 0xBA	; 186
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
				led1_state = 0;
 2ec:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <led1_state>
				PORTC &= ~(1 << LED1_PIN);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	db cf       	rjmp	.-74     	; 0x2ae <main+0x1e>
			}
			break;
			case '2':
			if (led2_state == 0)
 2f8:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <led2_state>
 2fc:	81 11       	cpse	r24, r1
 2fe:	0b c0       	rjmp	.+22     	; 0x316 <main+0x86>
			{
				LCD_String("LED2 is ON    ");
 300:	89 ec       	ldi	r24, 0xC9	; 201
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
				led2_state = 1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <led2_state>
				PORTC |= (1 << LED2_PIN);
 30e:	85 b3       	in	r24, 0x15	; 21
 310:	82 60       	ori	r24, 0x02	; 2
 312:	85 bb       	out	0x15, r24	; 21
 314:	cc cf       	rjmp	.-104    	; 0x2ae <main+0x1e>
			}
			else
			{
				LCD_String("LED2 is OFF   ");
 316:	88 ed       	ldi	r24, 0xD8	; 216
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_String>
				led2_state = 0;
 31e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <led2_state>
				PORTC &= ~(1 << LED2_PIN);
 322:	85 b3       	in	r24, 0x15	; 21
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	85 bb       	out	0x15, r24	; 21
 328:	c2 cf       	rjmp	.-124    	; 0x2ae <main+0x1e>
			}
			break;
			case '5': toggleFan();
 32a:	0e 94 30 01 	call	0x260	; 0x260 <toggleFan>
			break;
 32e:	bf cf       	rjmp	.-130    	; 0x2ae <main+0x1e>

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
